
# 초당 최대 처리량은 요청의 응답 완료 여부에 
# 관계없이 임의 시간부터 1초(=1,000밀리초)간 
# 처리하는 요청의 최대 개수

def solution(lines):
    answer = 0
    lis = []
    cnt = 0

    for line in lines : 
        date, time, inter = line.split()
        inter = float("".join(list(inter)[0:len(inter)-1]))
        h,m,n = map(float, time.split(":"))

        endtime = h*3600 + m*60 + n
        starttime = endtime - inter + 0.001
        lis.append((starttime, endtime ))

    # lines 배열은 응답완료시간 S를 기준으로 오름차순 정렬
    # lis 에 담긴 순서도 응답완료 시간 오름차순임 


    # < 구간 겹침 로직 >
    # 임의의 시간에서 1000밀리초 구간에서 
    # 쿼리가 존재하기만 하더라도 처리된 것으로 처리하기 때문에,
    # 단순히 겹치는 것만 확인하여 겹친다면 카운트를 1 증가


    # lis[인덱스][0] = 시작시간, lis[인덱스][1] = 종료시간
    for l in range(len(lis)) :
        # l 은 검사중인 아이 (나랑 겹치는 애들 누구누구있냐 ~ )
        cnt = 0 # 검사중인 아이랑 겹치는 횟수 
        for k in range(l , len(lis)) :
            # 시작시간[k]를 1 초 앞으로 당겼을 때, 
            # 종료시간[l]보다 작다면 1초 내에 처리된 것 
            if  lis[l][1] > lis[k][0]-1 :
                cnt+=1 
        # 기존 있던 최대 겹침 횟수랑 비교했을 때보다 크면
        # 걔가 answer로 갱신      
        answer = max(answer, cnt)

    return answer

print(solution( [
"2016-09-15 01:00:04.001 2.0s",
"2016-09-15 01:00:07.000 2s"
]
))

print(solution( [
"2016-09-15 01:00:04.002 2.0s",
"2016-09-15 01:00:07.000 2s"
]
))

print(solution( [
"2016-09-15 20:59:57.421 0.351s",
"2016-09-15 20:59:58.233 1.181s",
"2016-09-15 20:59:58.299 0.8s",
"2016-09-15 20:59:58.688 1.041s",
"2016-09-15 20:59:59.591 1.412s",
"2016-09-15 21:00:00.464 1.466s",
"2016-09-15 21:00:00.741 1.581s",
"2016-09-15 21:00:00.748 2.31s",
"2016-09-15 21:00:00.966 0.381s",
"2016-09-15 21:00:02.066 2.62s"
]
))
